
import io, json, os, hashlib, uuid
from datetime import datetime
from pathlib import Path

import numpy as np
import pandas as pd
import plotly.graph_objects as go
import streamlit as st

















from app._version import get_version_info as _vinfo

# --- version badge (fixed position, non-interactive) ---
try:
    _vi = _vinfo()
    _v_ver = _vi.get("version", "v?")
    _v_dt  = _vi.get("date_utc", "")
    import streamlit as st  # safe if already imported above
    st.markdown(
        f"<div style='position:fixed;top:12px;right:28px;opacity:.85;padding:2px 8px;border:1px solid #444;border-radius:12px;font-size:12px;'>"
        f"{_v_ver} â€¢ {_v_dt}"
        "</div>",
        unsafe_allow_html=True,
    )
except Exception:
    pass
# --- end version badge ---



# ===== v1.1.4c2 UI DEBUG WRAPPER (auto-insert) =====
# Catches exceptions during the main render and writes a full traceback
# to logs/ui_debug.log, then shows a friendly error in the Streamlit UI.
import os, traceback, datetime
try:
    import streamlit as st
except Exception:
    st = None

_log_dir = os.path.join(os.getcwd(), "logs")
os.makedirs(_log_dir, exist_ok=True)
_log_path = os.path.join(_log_dir, "ui_debug.log")

def _write_log(exc):
    with open(_log_path, "a", encoding="utf8") as _f:
        _f.write("=== UI DEBUG TRACE: " + datetime.datetime.utcnow().isoformat() + " ===\n")
        traceback.print_exc(file=_f)
        _f.write("\n\n")

def _safe_run(fn):
    try:
        fn()
    except Exception as e:
        _write_log(e)
        try:
            if st is not None:
                st.error("UI crashed during render. A diagnostic traceback was written to: " + _log_path)
                with st.expander("Show last traceback (truncated):"):
                    with open(_log_path, "r", encoding="utf8") as _f:
                        data = _f.read()
                        st.code(data[-10000:])
        except Exception:
            pass

try:
    if "main" in globals() and callable(globals().get("main")):
        _orig_main = globals().get("main")
        globals()["main"] = lambda : _safe_run(_orig_main)
except Exception:
    pass
# ===== end debug wrapper =====
