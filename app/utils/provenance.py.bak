f
# ===== v1.1.4 SHIM: write_provenance (auto-appended) =====
try:
    from app.server.provenance import merge_trace_provenance as _merge
except Exception as _e:
    _merge = None

def write_provenance(manifest: dict, trace_id: str, prov: dict) -> dict:
    """Compatibility shim (v1.1.4). Preserves legacy import path
    app.utils.provenance.write_provenance by delegating to the unified
    server.provenance merger. Safe to keep alongside existing code."""
    if _merge is not None:
        return _merge(manifest, trace_id, prov)
    traces = manifest.setdefault("traces", {})
    entry = traces.setdefault(trace_id, {})
    entry.setdefault("fetch_provenance", {}).update(prov or {})
    return manifest
# ===== end shim ===== __future__ import annotations
from dataclasses import dataclass, asdict
from typing import Any, Dict, List, Optional
import json
from pathlib import Path

@dataclass
class ProvenanceRecord:
    source: str
    target: str
    instrument: Optional[str]
    doi: Optional[str]
    url: Optional[str]
    fetched_utc: str
    transformations: List[Dict[str, Any]]
    notes: Optional[str] = None
    schema_version: str = "1.0"

def append_provenance(rec: ProvenanceRecord, path: str):
    p = Path(path)
    p.parent.mkdir(parents=True, exist_ok=True)
    data = []
    if p.exists():
        try:
            data = json.loads(p.read_text(encoding="utf-8"))
        except Exception:
            data = []
    data.append(asdict(rec))
    p.write_text(json.dumps(data, indent=2, ensure_ascii=False), encoding="utf-8")

# ===== v1.1.4 SHIM: write_provenance (auto-appended) =====
try:
    from app.server.provenance import merge_trace_provenance as _merge
except Exception as _e:
    _merge = None

def write_provenance(manifest: dict, trace_id: str, prov: dict) -> dict:
    \"\"\"Compatibility shim (v1.1.4). Preserves legacy import path
    app.utils.provenance.write_provenance by delegating to the unified
    server.provenance merger. Safe to keep alongside existing code.\"\"\"
    if _merge is not None:
        return _merge(manifest, trace_id, prov)
    traces = manifest.setdefault("traces", {})
    entry = traces.setdefault(trace_id, {})
    entry.setdefault("fetch_provenance", {}).update(prov or {})
    return manifest
# ===== end shim =====
