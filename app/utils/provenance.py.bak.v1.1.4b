# utils/provenance.py — v1.1.4 compatibility layer
# This file keeps legacy symbols alive while delegating to the unified server-side provenance.

from dataclasses import dataclass, field
from typing import Dict, Any, Optional

# Minimal legacy-friendly record so old imports don't explode.
@dataclass
class ProvenanceRecord:
    fields: Dict[str, Any] = field(default_factory=dict)
    def to_dict(self) -> Dict[str, Any]:
        return dict(self.fields)

# Delegate to the unified merger when available.
try:
    from app.server.provenance import merge_trace_provenance as _merge
except Exception:
    _merge = None

def write_provenance(manifest: Dict[str, Any], trace_id: str, prov: Dict[str, Any]) -> Dict[str, Any]:
    """Compatibility shim (v1.1.4). Preserves legacy import path
    app.utils.provenance.write_provenance by delegating to the unified
    server.provenance merger. Safe to keep alongside existing code."""
    if _merge is not None:
        return _merge(manifest, trace_id, prov)
    # Fallback inline merge if unified merger is unavailable.
    traces = manifest.setdefault("traces", {})
    entry = traces.setdefault(trace_id, {})
    entry.setdefault("fetch_provenance", {}).update(prov or {})
    return manifest