# app/server/fetch_archives.py
# Spectra App v1.1.4
from __future__ import annotations

import json
from datetime import datetime
from pathlib import Path
from typing import Any, Dict

from .fetchers import doi, eso, mast, nist, sdss, simbad

class FetchError(Exception):
    pass

def fetch_spectrum(archive: str, **kwargs) -> Dict[str, Any]:
    archive = (archive or '').lower()
    if archive == 'mast':
        return mast.fetch(**kwargs)
    if archive == 'simbad':
        return simbad.fetch(**kwargs)
    if archive == 'eso':
        return eso.fetch(**kwargs)
    if archive == 'sdss':
        return sdss.fetch(**kwargs)
    if archive == 'nist':
        return nist.fetch(**kwargs)
    if archive == 'doi':
        return doi.fetch(**kwargs)
    raise FetchError(f'Unsupported archive: {archive}')


def fetch_sample_mast(base: Path | str) -> Path:
    """Compatibility shim that materialises a provenance stub for scripts.

    The historic :func:`fetch_sample_mast` helper wrote a provenance manifest to
    disk so local scripts could exercise the ingestion flow without contacting
    a remote archive.  Preserve that behaviour by delegating to the current
    ``mast`` fetcher stub and storing its metadata on disk.
    """

    base_path = Path(base)
    output_dir = base_path / "data" / "samples"
    output_dir.mkdir(parents=True, exist_ok=True)

    sample = mast.fetch(target="Sample target", obs_id="SAMPLE", instrument="demo")
    metadata = dict(sample.get("meta") or {})
    metadata.setdefault("note", "Generated by fetch_sample_mast stub; replace with real fetch when available.")
    metadata["generated_at_utc"] = datetime.utcnow().isoformat() + "Z"
    metadata["wavelength_points"] = len(sample.get("wavelength_nm") or [])
    metadata["intensity_points"] = len(sample.get("intensity") or [])

    output_path = output_dir / "mast_sample_provenance.json"
    output_path.write_text(json.dumps(metadata, indent=2), encoding="utf-8")
    return output_path
