
import io, json, os, hashlib, uuid
from datetime import datetime
from pathlib import Path

import numpy as np
import pandas as pd
import plotly.graph_objects as go
import streamlit as st

from app._version import get_version_info as _vinfo
from app.utils.duplicate_ledger import DuplicateLedger
from app.utils import units
from app.utils.provenance import ProvenanceRecord, append_provenance
from app.utils.io_readers import read_table

st.set_page_config(page_title="Spectra App", layout="wide")

# --- VERSION BADGE ---

try:
    _vi = _vinfo()
    st.markdown(
        f"<div style='position:fixed;top:12px;right:28px;opacity:.85;padding:2px 8px;border:1px solid #444;border-radius:12px;font-size:12px;'>"
        f"{_vi.get('version','v?')} â€¢ {_vi.get('date_utc','')}"
        "</div>",
        unsafe_allow_html=True,
    )
except Exception:
    passtry:
        v = json.loads(Path("app/version.json").read_text(encoding="utf-8"))
        st.markdown(
            f"<div style='position:fixed; top:12px; right:20px; padding:6px 10px; border-radius:8px; "
            f"background:#2a2a2a; color:#ddd; font-size:12px; z-index:9999;'>"
            f"{v.get('version','v?')} • {v.get('date_utc','')[:19]}</div>",
            unsafe_allow_html=True
        )
    except Exception:
        pass
version_badge()

# --- SIDEBAR ---
st.sidebar.header("Spectra Controls")
st.sidebar.caption("Build info and quick toggles")

st.sidebar.subheader("Examples")
examples = {
    "He (example)": pd.DataFrame({"wavelength_nm": [587.6, 667.8], "intensity": [1.0, 0.6]}),
    "Ne (example)": pd.DataFrame({"wavelength_nm": [589, 640], "intensity": [0.8, 0.9]}),
}
active_examples = [name for name in examples if st.sidebar.checkbox(name, True, key=f"example_{name}")]

st.sidebar.markdown("---")
display_mode = st.sidebar.radio("Display mode", ["Overlay", "Differential", "Docs"], index=0, key="display_mode")
display_units = st.sidebar.selectbox("Display units", ["nm", "Å", "µm", "cm^-1"], index=0, key="display_units")

# Duplicate scope control
st.sidebar.markdown("### Duplicate scope")
dedupe_scope = st.sidebar.radio("Apply duplicate detection to", ["Global", "Session only", "Off"], index=0, horizontal=False)
if "session_id" not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())

if st.sidebar.button("Purge session duplicates"):
    DuplicateLedger().purge_session(st.session_state.session_id)
    st.sidebar.success("Session fingerprints purged.")

export_click = st.sidebar.button("Export what I see")

# --- HEADER & PATCH NOTES ---
st.title("Spectra App")
with st.expander("What's new in this patch?", expanded=False):
    st.write("Idempotent unit toggling from canonical nm, CSV ingest hardening, duplicate scope + override, version badge, provenance drawer.")

# --- STATE ---
if "traces" not in st.session_state:
    st.session_state.traces = []  # list of {label, wl_nm(np.array), intensity(np.array), meta{}}
if "unit_logs" not in st.session_state:
    st.session_state.unit_logs = []
if "provenance" not in st.session_state:
    st.session_state.provenance = []  # records appended

ledger = DuplicateLedger()

try:
    _vi = _vinfo()
    st.markdown(
        f"<div style='position:fixed;top:12px;right:28px;opacity:.85;padding:2px 8px;border:1px solid #444;border-radius:12px;font-size:12px;'>"
        f"{_vi.get('version','v?')} â€¢ {_vi.get('date_utc','')}"
        "</div>",
        unsafe_allow_html=True,
    )
except Exception:
    passbase = (label or "trace").strip() or "trace"
    names = {t["label"] for t in st.session_state.traces}
    i, cand = 1, base
    while cand in names:
        i += 1; cand = f"{base} ({i})"
    return cand

try:
    _vi = _vinfo()
    st.markdown(
        f"<div style='position:fixed;top:12px;right:28px;opacity:.85;padding:2px 8px;border:1px solid #444;border-radius:12px;font-size:12px;'>"
        f"{_vi.get('version','v?')} â€¢ {_vi.get('date_utc','')}"
        "</div>",
        unsafe_allow_html=True,
    )
except Exception:
    passfig = go.Figure()
    for t in traces:
        wl_display = units.convert_nm_to_display(t["wl_nm"], unit_choice)
        fig.add_trace(go.Scatter(x=wl_display, y=t["intensity"], mode="lines", name=t["label"]))
    fig.update_layout(xaxis_title=f"Wavelength ({unit_choice})", yaxis_title="Intensity", legend_title_text="Traces")
    st.plotly_chart(fig, use_container_width=True)
    return fig

try:
    _vi = _vinfo()
    st.markdown(
        f"<div style='position:fixed;top:12px;right:28px;opacity:.85;padding:2px 8px;border:1px solid #444;border-radius:12px;font-size:12px;'>"
        f"{_vi.get('version','v?')} â€¢ {_vi.get('date_utc','')}"
        "</div>",
        unsafe_allow_html=True,
    )
except Exception:
    passexport_dir = Path("exports"); export_dir.mkdir(parents=True, exist_ok=True)
    stamp = datetime.utcnow().strftime("%Y%m%d-%H%M%S")
    base = export_dir / f"spectra_export_{stamp}"
    rows = []
    for t in st.session_state.traces:
        wl_disp = units.convert_nm_to_display(t["wl_nm"], unit_choice)
        for x, y in zip(wl_disp, t["intensity"]):
            rows.append({"label": t["label"], "wavelength": float(x), "unit": unit_choice, "intensity": float(y)})
    pd.DataFrame(rows).to_csv(str(base)+".csv", index=False, encoding="utf-8")
    manifest = {
        "export_utc": datetime.utcnow().isoformat()+"Z",
        "app_version": json.loads(Path("app/version.json").read_text(encoding="utf-8")),
        "display_unit": unit_choice,
        "provenance": st.session_state.provenance,
        "unit_logs": st.session_state.unit_logs,
    }
    Path(str(base)+".manifest.json").write_text(json.dumps(manifest, indent=2, ensure_ascii=False), encoding="utf-8")
    st.success(f"Exported CSV + manifest at: {base}.*")

try:
    _vi = _vinfo()
    st.markdown(
        f"<div style='position:fixed;top:12px;right:28px;opacity:.85;padding:2px 8px;border:1px solid #444;border-radius:12px;font-size:12px;'>"
        f"{_vi.get('version','v?')} â€¢ {_vi.get('date_utc','')}"
        "</div>",
        unsafe_allow_html=True,
    )
except Exception:
    passdigest = ledger.sha256_bytes(data)
    meta = {"filename": name, "bytes": len(data), "utc": datetime.utcnow().isoformat()+"Z", "session_id": st.session_state.session_id}
    if dedupe_scope != "Off" and ledger.seen(digest):
        if dedupe_scope == "Global" or (dedupe_scope == "Session only" and meta["session_id"] == st.session_state.session_id):
            # Offer override
            c1, c2 = st.columns([4,1])
            with c1:
                st.info(f"Duplicate skipped: {name}")
            with c2:
                if st.button("Ingest anyway", key=f"override_{digest[:8]}"):
                    _ingest_bytes(name, data, digest, meta, duplicate_of=digest)
            return
    _ingest_bytes(name, data, digest, meta, duplicate_of=None)

try:
    _vi = _vinfo()
    st.markdown(
        f"<div style='position:fixed;top:12px;right:28px;opacity:.85;padding:2px 8px;border:1px solid #444;border-radius:12px;font-size:12px;'>"
        f"{_vi.get('version','v?')} â€¢ {_vi.get('date_utc','')}"
        "</div>",
        unsafe_allow_html=True,
    )
except Exception:
    pass# Record digest
    if dedupe_scope != "Off":
        ledger.record(digest, meta)
    # Read data table robustly
    df = read_table(data)
    wl = df[df.columns[0]].to_numpy()
    inten = df[df.columns[1]].to_numpy()
    sink = units.LogSink()
    # Best guess: assume uploaded units are nm unless inferred; keep canonical in nm
    # We cannot reliably infer here without headers; treat numeric as nm and allow user to change display
    wl_nm = units.convert_array_to_nm(wl, "nm", sink)  # no-op but logs structure stays consistent
    label = safe_label(Path(name).stem)
    st.session_state.traces.append({"label": label, "wl_nm": wl_nm, "intensity": inten, "meta": meta})
    st.session_state.unit_logs.append({"label": label, "events": sink.to_list()})
    prov = ProvenanceRecord(source="upload", target=label, instrument=None, doi=None, url=None,
                            fetched_utc=datetime.utcnow().isoformat()+"Z",
                            transformations=sink.to_list(),
                            notes=("duplicate_of:"+duplicate_of) if duplicate_of else None)
    st.session_state.provenance.append(prov.__dict__)

# Seed examples once
if not st.session_state.traces:
    for name in active_examples:
        df = examples[name]
        st.session_state.traces.append({"label": name, "wl_nm": df["wavelength_nm"].to_numpy(), "intensity": df["intensity"].to_numpy(), "meta": {"example": True}})

# --- RENDER MODES ---
if display_mode == "Overlay":
    st.subheader("Overlays")
    st.caption("Legend must have no empty labels.")
    uploader = st.file_uploader("Add spectra files (CSV: wavelength, intensity)", accept_multiple_files=True, type=["csv","txt"])
    if uploader:
        for uf in uploader:
            data = uf.read()
            add_trace_from_bytes(uf.name, data)
    render_plot(st.session_state.traces, display_units)

elif display_mode == "Differential":
    st.subheader("Differential")
    names = [t["label"] for t in st.session_state.traces]
    if len(names) < 2:
        st.info("Need at least two traces.")
    else:
        a = st.selectbox("Trace A", names, key="diffA")
        b = st.selectbox("Trace B", names, key="diffB")
        op = st.radio("Operation", ["A - B", "A / B"], horizontal=True)
        norm = st.selectbox("Normalization", ["none","max","zscore"])
        npts = st.slider("Resample points", 200, 8000, 2000, step=200)
        if st.button("Compute differential"):
            A = next(t for t in st.session_state.traces if t["label"] == a)
            B = next(t for t in st.session_state.traces if t["label"] == b)
            # Resample on canonical nm grid overlap
            ax, bx = A["wl_nm"], B["wl_nm"]
            lo, hi = max(float(np.min(ax)), float(np.min(bx))), min(float(np.max(ax)), float(np.max(bx)))
            if hi <= lo:
                st.error("No overlap between traces."); 
            else:
                grid = np.linspace(lo, hi, npts)
                Ay = np.interp(grid, ax, A["intensity"])
                By = np.interp(grid, bx, B["intensity"])

try:
    _vi = _vinfo()
    st.markdown(
        f"<div style='position:fixed;top:12px;right:28px;opacity:.85;padding:2px 8px;border:1px solid #444;border-radius:12px;font-size:12px;'>"
        f"{_vi.get('version','v?')} â€¢ {_vi.get('date_utc','')}"
        "</div>",
        unsafe_allow_html=True,
    )
except Exception:
    passif method=="max":
                        m = float(np.nanmax(np.abs(y))) or 1.0; return y/m, {"op":"normalize","method":"max","scale":m}
                    if method=="zscore":
                        mu, sd = float(np.nanmean(y)), float(np.nanstd(y)) or 1.0; return (y-mu)/sd, {"op":"normalize","method":"zscore","mu":mu,"sd":sd}
                    return y, {"op":"normalize","method":"none"}
                Ay2, logA = norm_vec(Ay, norm); By2, logB = norm_vec(By, norm)
                if op=="A - B":
                    Dy, opname = Ay2 - By2, "diff_subtract"
                else:
                    By2 = np.where(By2==0, np.nan, By2); Dy, opname = Ay2 / By2, "diff_ratio"
                label = f"{a}_{op.replace(' ','')}_{b}"
                st.session_state.traces.append({"label": label, "wl_nm": grid, "intensity": Dy, "meta": {"derived": True}})
                st.success(f"Derived trace added: {label}")
                render_plot([t for t in st.session_state.traces if t["label"] == label], display_units)

else:
    st.subheader("Docs")
    st.write("Docs panel placeholder.")

# --- PROVENANCE / UNIT LOGS DRAWER ---
with st.expander("Session logs (provenance, unit events)"):
    if st.session_state.provenance:
        st.json(st.session_state.provenance)
    else:
        st.caption("No provenance yet.")
    if st.session_state.unit_logs:
        st.json(st.session_state.unit_logs)
    else:
        st.caption("No unit logs yet.")

# --- EXPORT ---
if export_click:
    export_view(display_units)
